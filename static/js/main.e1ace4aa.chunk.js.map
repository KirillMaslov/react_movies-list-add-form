{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","hasInvalidLink","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","isValidHttpUrl","string","url","URL","_","protocol","setTitle","hasTitleError","setHasTitleError","setDescription","setImgUrl","hasImgUrlError","setHasImgUrlError","setImdbUrl","hasImdbUrlError","setHasImdbUrlError","setImdbId","hasImdbIdError","setHasImdbIdError","count","setCount","onSubmit","preventDefault","newTitle","newDescription","newImgUrl","trim","newImdbUrl","newImdbId","disabled","App","moviesFromServer","moviesList","setMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1ace4aa.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  hasInvalidLink?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  hasInvalidLink = false,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && (!value || hasInvalidLink);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {\n            hasInvalidLink\n              ? `${label} is invalid`\n              : `${label} is required`\n          }\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  function isValidHttpUrl(string: string): boolean {\n    let url;\n\n    try {\n      url = new URL(string);\n    } catch (_) {\n      return false;\n    }\n\n    return url.protocol === 'http:' || url.protocol === 'https:';\n  }\n\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n  //\n  const [description, setDescription] = useState('');\n  //\n  const [imgUrl, setImgUrl] = useState('');\n  const [hasImgUrlError, setHasImgUrlError] = useState(false);\n  //\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [hasImdbUrlError, setHasImdbUrlError] = useState(false);\n  //\n  const [imdbId, setImdbId] = useState('');\n  const [hasImdbIdError, setHasImdbIdError] = useState(false);\n  //\n  const [count, setCount] = useState(0);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setHasTitleError(!title);\n    setHasImgUrlError(!imgUrl);\n    setHasImdbUrlError(!imdbUrl);\n    setHasImdbIdError(!imdbId);\n\n    if (hasTitleError || hasImgUrlError\n      || hasImdbUrlError || hasImdbIdError\n      || !isValidHttpUrl(imgUrl) || !isValidHttpUrl(imdbUrl)) {\n      return;\n    }\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newTitle) => {\n          setTitle(newTitle);\n          setHasTitleError(false);\n        }}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newDescription) => {\n          setDescription(newDescription);\n        }}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newImgUrl) => {\n          setImgUrl(newImgUrl.trim());\n          setHasImgUrlError(false);\n        }}\n        required\n        hasInvalidLink={!isValidHttpUrl(imgUrl)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl.trim()}\n        onChange={(newImdbUrl) => {\n          setImdbUrl(newImdbUrl.trim());\n          setHasImdbUrlError(false);\n        }}\n        required\n        hasInvalidLink={!isValidHttpUrl(imdbUrl)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newImdbId) => {\n          setImdbId(newImdbId.trim());\n          setHasImdbIdError(false);\n        }}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!title || !imgUrl || !imdbUrl || !imdbId}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (movie: Movie): void => {\n    setMoviesList([...moviesList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}