{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","hasInvalidLink","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","htmlFor","type","classNames","event","target","onBlur","NewMovie","onAdd","isValidHttpUrl","string","url","URL","_","protocol","movieParams","setMovieParams","paramsErrors","setParamsErrors","handleChange","param","prevParams","prevErrors","count","setCount","onSubmit","preventDefault","disabled","App","moviesFromServer","moviesList","setMoviesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aa179217.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  name: keyof Movie,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (value: string, param: keyof Movie) => void,\n  hasInvalidLink?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n  hasInvalidLink = false,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n\n  const hasError = touched && required && (!value.trim() || hasInvalidLink);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value, name)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">\n          {\n            hasInvalidLink\n              ? `${label} is invalid`\n              : `${label} is required`\n          }\n        </p>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  function isValidHttpUrl(string: string): boolean {\n    let url;\n\n    try {\n      url = new URL(string);\n    } catch (_) {\n      return false;\n    }\n\n    return url.protocol === 'http:' || url.protocol === 'https:';\n  }\n\n  const [movieParams, setMovieParams] = useState<Movie>({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [paramsErrors, setParamsErrors] = useState({\n    title: false,\n    imgUrl: false,\n    imdbUrl: false,\n    imdbId: false,\n  });\n\n  const handleChange = (value: string, param: keyof typeof movieParams) => {\n    setMovieParams((prevParams) => ({\n      ...prevParams,\n      [param]: value,\n    }));\n    setParamsErrors((prevErrors) => ({\n      ...prevErrors,\n      [param]: false,\n    }));\n  };\n\n  const [count, setCount] = useState(0);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    setParamsErrors(() => ({\n      title: !movieParams.title,\n      imgUrl: !movieParams.imgUrl,\n      imdbUrl: !movieParams.imdbUrl,\n      imdbId: !movieParams.imdbId,\n    }));\n\n    if (paramsErrors.title || paramsErrors.imgUrl\n      || paramsErrors.imdbUrl || paramsErrors.imdbId\n      || !isValidHttpUrl(movieParams.imdbUrl)\n      || !isValidHttpUrl(movieParams.imgUrl)) {\n      return;\n    }\n\n    onAdd({\n      title: movieParams.title,\n      description: movieParams.description,\n      imgUrl: movieParams.imgUrl,\n      imdbUrl: movieParams.imdbUrl,\n      imdbId: movieParams.imdbId,\n    });\n    setMovieParams({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n    setCount(count + 1);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={movieParams.title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={movieParams.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={movieParams.imgUrl}\n        onChange={handleChange}\n        required\n        hasInvalidLink={!isValidHttpUrl(movieParams.imgUrl)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={movieParams.imdbUrl.trim()}\n        onChange={handleChange}\n        required\n        hasInvalidLink={!isValidHttpUrl(movieParams.imdbUrl)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={movieParams.imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={!movieParams.title.trim() || !movieParams.imgUrl\n              || !movieParams.imdbUrl || !movieParams.imdbId\n              || !isValidHttpUrl(movieParams.imgUrl)\n              || !isValidHttpUrl(movieParams.imdbUrl)}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [moviesList, setMoviesList] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (movie: Movie): void => {\n    setMoviesList([...moviesList, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}